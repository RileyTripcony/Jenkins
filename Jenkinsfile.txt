pipeline {
    agent any
    
    environment {
        DIRECTORY_PATH = 'C:\\Users\\Riley\\JenkinsGithub\\jenkinsfile.txt'
        TESTING_ENVIRONMENT = 'Jenkins'
        PRODUCTION_ENVIRONMENT = 'Riley'
    }
    
    stages {
       stage('Build') {
            steps {
                echo "Build started!"
                echo "Fetching source code from the directory: ${env.DIRECTORY_PATH}"
                echo "Compiling the code and packaging using Maven"
                // Example Maven build command sh 'mvn clean package'
                echo "Build completed!"
            }
            post {
                success {
                    mail to: "triptripcony@gmail.com",
                             subject: "Build Status: SUCCESS",
                             body: "The build stage was successful."
                }
            }
        }
        
        stage('Unit and Integration Tests') {
            steps {
                echo "Running unit and integration tests!"
                // Example test command sh 'mvn test'
                echo "Testing completed!"
            }
            post {
                always {
                    mail to: "triptripcony@gmail.com",
                             subject: "Test Status",
                             body: "Unit and integration tests completed. Please check the logs.",
                             attachmentsPattern: '**/target/surefire-reports/*.xml',
                             mimeType: 'text/plain'
                }
            }
        }
        
        stage('Code Analysis') {
            steps {
                echo "Running code quality analysis using SonarQube!"
                // Example SonarQube analysis command sh 'mvn sonar:sonar'
                echo "Code analysis completed!"
            }
            post {
                always {
                    mail to: "triptripcony@gmail.com",
                             subject: "Code Analysis Status",
                             body: "Code analysis completed. Please check the logs.",
                             attachmentsPattern: '**/sonar-reports/*.xml',
                             mimeType: 'text/plain'
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo "Running security scan using OWASP Dependency-Check!"
                // Example security scan command sh 'mvn dependency-check:check'
                echo "Security scan completed!"
            }
            post {
                always {
                    mail to: "triptripcony@gmail.com",
                             subject: "Security Scan Status",
                             body: "Security scan completed. Please check the logs.",
                             attachmentsPattern: '**/dependency-check-report.xml',
                             mimeType: 'text/plain'
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                echo "Deploying application to staging environment: ${env.TESTING_ENVIRONMENT}"
                // Example deployment command sh 'scp target/*.war user@staging-server:/path/to/deploy'
                echo "Deployment to staging completed!"
            }
        }
        
        stage('Integration Tests on Staging') {
            steps {
                echo "Running integration tests on staging environment!"
                // Example command for integration tests on staging sh 'curl -X GET http://staging-server/api/test'
                echo "Integration testing on staging completed!"
            }
        }
        
        stage('Deploy to Production') {
            steps {
                echo "Deploying application to production environment: ${env.PRODUCTION_ENVIRONMENT}"
                // Example deployment command sh 'scp target/*.war user@production-server:/path/to/deploy'
                echo "Deployment to production completed!"
            }
        }
    }
}
